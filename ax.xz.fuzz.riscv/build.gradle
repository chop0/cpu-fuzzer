plugins {
	id 'java'
	id "io.github.krakowski.jextract" version "0.5.0"
	id 'c'
	id 'assembler'
}

group = 'ax.xz'
version = '0.0.1'

java {
	sourceCompatibility = "22.PREVIEW"
	targetCompatibility = "22.PREVIEW"
}

sourceSets {
	main {
		resources {
			srcDir 'src/main/resources'
			srcDir "${project.layout.buildDirectory.asFile.get().toPath()}/lib/"
		}
	}
}


repositories {
	mavenCentral()
}

dependencies {
	implementation project(':ax.xz.fuzz')

	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
	useJUnitPlatform()
}

jextract {
	header("${project.projectDir}/src/main/headers/slave.h") {
		libraries = ['slave']
		targetPackage = 'ax.xz.fuzz.riscv.tester'
		className = "slave_h"
		functions = ['trampoline_return_address', 'maybe_allocate_signal_stack', 'do_test']
		constants = ['ILL_ILLOPC',
			     'ILL_ILLOPN',
			     'ILL_ILLADR',
			     'ILL_ILLTRP',
			     'ILL_PRVOPC',
			     'ILL_PRVREG',
			     'ILL_COPROC',
			     'ILL_BADSTK'
		]
		useSystemLoadLibrary = false
		libraries = []

		definedMacros = ['SLAVE_RISCV']

		variables = ['routine_begin', 'routine_end']
		structs = ['fault_details', 'execution_result', 'saved_state']
	}
}

def copyRiscv64SharedLibrary = tasks.register("makeRiscv64SharedLibrary") {
	dependsOn(tasks.linkMainSharedLibrary)

	def sharedFile = tasks.named("linkMainSharedLibrary").get().outputs.files.filter { it.name.contains("libmain.so") }.singleFile
	def dstDir = project.layout.buildDirectory.asFile.get().toPath().resolve("lib")

	inputs.file(sharedFile)
	outputs.dir(dstDir)

	doLast {
		mkdir(dstDir)
		copy {
			from sharedFile
			into dstDir

			rename { "libmain.riscv64.so"}
		}
	}
}

processResources.dependsOn(copyRiscv64SharedLibrary)

tasks.withType(JavaCompile).configureEach {
	dependsOn copyRiscv64SharedLibrary
	it.options.compilerArgs.add('--enable-preview')
}

model {

	toolChains {
		my_gcc(Gcc) {
			target("linux_riscv64") {
				cCompiler.executable = "riscv64-unknown-linux-gnu-gcc"
				cppCompiler.executable = "riscv64-unknown-linux-gnu-gcc"
				assembler.executable = "riscv64-unknown-linux-gnu-gcc"
				linker.executable = "riscv64-unknown-linux-gnu-gcc"
			}

			eachPlatform {
				cCompiler.withArguments { args ->
					args << "-g"
					args << "-gdwarf-5"
					args << "-Wl,-z,relro"
					args << "-Wl,-z,now"
					args << "-DSLAVE_RISCV"
					args << "-fPIC"
				}
			}
		}
	}

	platforms {
		linux_riscv64 {
			architecture "riscv64"
			operatingSystem "linux"
		}
	}

	components {
		main(NativeLibrarySpec) {
			targetPlatform "linux_riscv64"

			// add the include path
			sources {
				c {
					source {
						srcDirs 'src/main/c'
					}

					exportedHeaders {
						srcDirs 'src/main/headers', "${project.layout.buildDirectory.asFile.get().toPath()}/include"
					}
				}
			}
		}
	}
}
