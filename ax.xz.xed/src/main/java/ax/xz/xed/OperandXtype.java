package ax.xz.xed;

import java.util.Optional;

import static ax.xz.xed.xed_14.*;

public enum OperandXtype {
	XTYPE_2BF16(XED_OPERAND_XTYPE_2BF16()),
	XTYPE_2BF8(XED_OPERAND_XTYPE_2BF8()),
	XTYPE_2F16(XED_OPERAND_XTYPE_2F16()),
	XTYPE_2HF8(XED_OPERAND_XTYPE_2HF8()),
	XTYPE_2I16(XED_OPERAND_XTYPE_2I16()),
	XTYPE_2I8(XED_OPERAND_XTYPE_2I8()),
	XTYPE_2U16(XED_OPERAND_XTYPE_2U16()),
	XTYPE_4I8(XED_OPERAND_XTYPE_4I8()),
	XTYPE_4U8(XED_OPERAND_XTYPE_4U8()),
	XTYPE_B80(XED_OPERAND_XTYPE_B80()),
	XTYPE_BF16(XED_OPERAND_XTYPE_BF16()),
	XTYPE_BF8(XED_OPERAND_XTYPE_BF8()),
	XTYPE_F16(XED_OPERAND_XTYPE_F16()),
	XTYPE_F32(XED_OPERAND_XTYPE_F32()),
	XTYPE_F64(XED_OPERAND_XTYPE_F64()),
	XTYPE_F80(XED_OPERAND_XTYPE_F80()),
	XTYPE_HF8(XED_OPERAND_XTYPE_HF8()),
	XTYPE_I1(XED_OPERAND_XTYPE_I1()),
	XTYPE_I128(XED_OPERAND_XTYPE_I128()),
	XTYPE_I16(XED_OPERAND_XTYPE_I16()),
	XTYPE_I32(XED_OPERAND_XTYPE_I32()),
	XTYPE_I64(XED_OPERAND_XTYPE_I64()),
	XTYPE_I8(XED_OPERAND_XTYPE_I8()),
	XTYPE_INT(XED_OPERAND_XTYPE_INT()),
	XTYPE_STRUCT(XED_OPERAND_XTYPE_STRUCT()),
	XTYPE_U128(XED_OPERAND_XTYPE_U128()),
	XTYPE_U16(XED_OPERAND_XTYPE_U16()),
	XTYPE_U256(XED_OPERAND_XTYPE_U256()),
	XTYPE_U32(XED_OPERAND_XTYPE_U32()),
	XTYPE_U64(XED_OPERAND_XTYPE_U64()),
	XTYPE_U8(XED_OPERAND_XTYPE_U8()),
	XTYPE_UINT(XED_OPERAND_XTYPE_UINT()),
	XTYPE_VAR(XED_OPERAND_XTYPE_VAR()),
	XTYPE_LAST(XED_OPERAND_XTYPE_LAST());

	private final int xedEnum;

	OperandXtype(int xedEnum) {
		this.xedEnum = xedEnum;
	}

	public static Optional<OperandXtype> from(int xedEnum) {
		if (xedEnum == 0) {
			return Optional.empty();
		}

		var result = values()[xedEnum - 1];
		if (result.xedEnum != xedEnum) {
			throw new AssertionError("mismatched enum: " + xedEnum + ", " + result);
		}

		return Optional.of(result);
	}
}
