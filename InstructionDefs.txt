INSTRUCTION: <invalid> | <invalid> | INTEL8086
	mnemonic: INVALID
	flags: no-instr cflow=ex asm-ig
	fast: mnemonic=(bad)
	gas: mnemonic=(bad)
	intel: mnemonic=(bad)
	masm: mnemonic=(bad)
	nasm: mnemonic=(bad)
END

# Code: DeclareByte
INSTRUCTION: <db> | <db> | INTEL8086
	mnemonic: db
	code-mnemonic: DeclareByte
	flags: no-instr cflow=ex asm-ig
	gas: mnemonic=.byte decl
	intel: decl
	masm: decl
	nasm: decl
END

# Code: DeclareWord
INSTRUCTION: <dw> | <dw> | INTEL8086
	mnemonic: dw
	code-mnemonic: DeclareWord
	flags: no-instr cflow=ex asm-ig
	gas: mnemonic=.word decl
	intel: decl
	masm: decl
	nasm: decl
END

# Code: DeclareDword
INSTRUCTION: <dd> | <dd> | INTEL8086
	mnemonic: dd
	code-mnemonic: DeclareDword
	flags: no-instr cflow=ex asm-ig
	gas: mnemonic=.int decl
	intel: decl
	masm: decl
	nasm: decl
END

# Code: DeclareQword
INSTRUCTION: <dq> | <dq> | INTEL8086
	mnemonic: dq
	code-mnemonic: DeclareQword
	flags: no-instr cflow=ex asm-ig
	gas: mnemonic=.quad decl
	intel: decl
	masm: decl
	nasm: decl
END

# Code: Zero_bytes
INSTRUCTION: <zero_bytes> | ZERO_BYTES | INTEL8086
	flags: no-instr
END

# Code: Add_rm8_r8
INSTRUCTION: 00 /r | ADD r/m8, r8 | INTEL8086
	ops: rw=rm r=reg | UInt8
	rflags: w=oszacp
	flags: lock xacquire xrelease
	gas: suffix=b
END

# Code: Add_rm16_r16
INSTRUCTION: o16 01 /r | ADD r/m16, r16 | INTEL8086
	ops: rw=rm r=reg | UInt16
	rflags: w=oszacp
	flags: lock xacquire xrelease
	gas: suffix=w
END

# Code: Add_rm32_r32
INSTRUCTION: o32 01 /r | ADD r/m32, r32 | INTEL386
	ops: rw=rm r=reg | UInt32
	rflags: w=oszacp
	flags: lock xacquire xrelease
	gas: suffix=l
END

# Code: Add_rm64_r64
INSTRUCTION: o64 01 /r | ADD r/m64, r64 | X64
	ops: rw=rm r=reg | UInt64
	rflags: w=oszacp
	flags: 64 lock xacquire xrelease
	gas: suffix=q
END

# Code: Add_r8_rm8
INSTRUCTION: 02 /r | ADD r8, r/m8 | INTEL8086
	ops: rw=reg r=rm | UInt8
	rflags: w=oszacp
	gas: suffix=b
END

# Code: Add_r16_rm16
INSTRUCTION: o16 03 /r | ADD r16, r/m16 | INTEL8086
	ops: rw=reg r=rm | UInt16
	rflags: w=oszacp
	gas: suffix=w
END

# Code: Add_r32_rm32
INSTRUCTION: o32 03 /r | ADD r32, r/m32 | INTEL386
	ops: rw=reg r=rm | UInt32
	rflags: w=oszacp
	gas: suffix=l
END

# Code: Add_r64_rm64
INSTRUCTION: o64 03 /r | ADD r64, r/m64 | X64
	ops: rw=reg r=rm | UInt64
	rflags: w=oszacp
	flags: 64
	gas: suffix=q
END

