plugins {
	id 'application'

	id 'java'
	id 'idea'
	id 'antlr'

	id "io.github.krakowski.jextract" version "0.5.0"
	id 'c'
	id 'assembler'

	id 'org.beryx.jlink' version '3.0.1'
}

repositories {
	mavenCentral()
}

version = '0.0.1'

java {
	sourceCompatibility = "22.PREVIEW"
	targetCompatibility = "22.PREVIEW"
}
tasks.withType(JavaCompile).each {
	it.options.compilerArgs.add('--enable-preview')
}

application {
	mainModule = 'ax.xz.fuzz'
	mainClass = 'ax.xz.fuzz.Master'
	applicationDefaultJvmArgs = ["-Dcom.sun.management.jmxremote.port=9999", "--enable-preview", "-Djava.library.path=${projectDir}/build/libs/main/shared", "--add-opens=java.base/java.util=com.fasterxml.jackson.databind"]
}

dependencies {
	antlr "org.antlr:antlr4:4.13.1"

	implementation 'io.github.icedland.iced:iced-x86:1.21.0'
	implementation 'org.antlr:antlr4:4.13.1'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.2'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.2'

	implementation 'info.picocli:picocli:4.7.6'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

test {
	useJUnitPlatform()
}

jextract {
	header("${project.projectDir}/src/main/c/slave.h") {
		libraries = ['slave']
		targetPackage = 'ax.xz.fuzz.tester'
		className = "slave_h"
		functions = ['maybe_allocate_signal_stack', 'do_test', 'mmap', 'munmap']
		constants = ['ILL_ILLOPC',
			     'ILL_ILLOPN',
			     'ILL_ILLADR',
			     'ILL_ILLTRP',
			     'ILL_PRVOPC',
			     'ILL_PRVREG',
			     'ILL_COPROC',
			     'ILL_BADSTK',

			     'MAP_ANONYMOUS',
			     'MAP_PRIVATE',
			     'MAP_FIXED',
			     'MAP_FAILED',

			     'PROT_READ',
			     'PROT_WRITE',
			     'PROT_EXEC',
		]
		useSystemLoadLibrary = true
		libraries = ['main']

		variables = ['routine_begin', 'routine_end']
		structs = ['fault_details', 'execution_result', 'saved_state']
	}
}

jlink {
	targetPlatform("linux-x64") {
		jdkHome = jdkDownload("https://download.java.net/java/GA/jdk22.0.2/c9ecb94cd31b495da20a27d4581645e8/9/GPL/openjdk-22.0.2_linux-x64_bin.tar.gz")
	}

	jpackage {
		targetPlatformName = 'linux-x64'
	}
}

task copyNativeLibraryToImage {
	doLast {
		copy {
			print(jlink.imageDir.get().dir("cpu-fuzzer-linux-x64/lib"))
			from linkMainSharedLibrary.outputs.files.filter { it.name.contains("libmain.so") }.singleFile
			into jlink.imageDir.get().dir("cpu-fuzzer-linux-x64/lib")
		}
	}
}

tasks.jlink.finalizedBy copyNativeLibraryToImage

model {
	toolChains {
		cross_gcc(Gcc) {
			// if host if macos
			if (System.getProperty("os.name").toLowerCase().contains("mac")) {
				target("linux") {
					cCompiler.executable = "x86_64-unknown-linux-gnu-gcc"
					assembler.executable = "x86_64-unknown-linux-gnu-gcc"
					linker.executable = "x86_64-unknown-linux-gnu-gcc"
				}
			} else {
				target("linux") {
					cCompiler.executable = "gcc"
				}
			}

			eachPlatform {
				cCompiler.withArguments { args ->
					args << "-std=gnu11"
					args << "-march=skylake"
				}
			}
		}
	}

	platforms {
		linux {
			architecture "x86_64"
			operatingSystem "linux"
		}
	}

	components {
		main(NativeLibrarySpec) {
			targetPlatform "linux"
		}
	}
}

tasks.compileJava.dependsOn 'mainSharedLibrary'

generateGrammarSource {
	arguments += ['-package', 'ax.xz.fuzz.parse']
}
